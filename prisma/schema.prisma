generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Role {
  ADMIN
  MANAGER
  WAITER
  KITCHEN_STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  OUT_OF_SERVICE
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

// --- Models ---
model Staff {
  id                   String        @id @default(uuid())
  email                String        @unique
  name                 String?
  password             String
  role                 Role          @default(WAITER)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  isVerified           Boolean       @default(false)
  verificationToken    String?       @unique
  verificationExpires  DateTime?
  passwordResetToken   String?       @unique
  passwordResetExpires DateTime?
  reservationsMade     Reservation[] @relation("StaffMadeReservation")
  ordersTaken          Order[]       @relation("StaffTookOrder")

  @@map("staff")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuItems   MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orderItems  OrderItem[]
  recipes     Recipe[]

  @@map("menu_items")
}

model Ingredient {
  id                String             @id @default(uuid())
  name              String             @unique
  unit              String
  stockQuantity     Float              @default(0)
  lowStockThreshold Float?             @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  recipeIngredients RecipeIngredient[]

  @@map("ingredients")
}

model Recipe {
  id                String             @id @default(uuid())
  name              String
  description       String?
  instructions      String?
  yield             Float?
  yieldUnit         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  menuItemId        String?
  menuItem          MenuItem?          @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
  recipeIngredients RecipeIngredient[]

  @@map("recipes")
}

model RecipeIngredient {
  id             String     @id @default(uuid())
  recipeId       String
  recipe         Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredientId   String
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  quantityNeeded Float
  createdAt      DateTime   @default(now())

  @@unique([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

model Table {
  id           String        @id @default(uuid())
  tableNumber  String        @unique
  capacity     Int
  status       TableStatus   @default(AVAILABLE)
  location     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  orders       Order[]

  @@map("tables")
}

model Reservation {
  id              String            @id @default(uuid())
  customerName    String
  customerPhone   String?
  customerEmail   String?
  reservationTime DateTime
  numberOfGuests  Int
  status          ReservationStatus @default(PENDING)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tableId         String?
  table           Table?            @relation(fields: [tableId], references: [id], onDelete: SetNull)
  staffId         String?
  staff           Staff?            @relation("StaffMadeReservation", fields: [staffId], references: [id], onDelete: SetNull)
  orderId         String?           @unique
  order           Order?

  @@map("reservations")
}

model Order {
  id              String       @id @default(uuid())
  orderNumber     String?      @unique @default(cuid())
  orderType       OrderType
  status          OrderStatus  @default(PENDING)
  totalAmount     Float        @default(0)
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  staffId         String?
  staff           Staff?       @relation("StaffTookOrder", fields: [staffId], references: [id], onDelete: SetNull)
  tableId         String?
  table           Table?       @relation(fields: [tableId], references: [id], onDelete: SetNull)
  reservationId   String?      @unique
  reservation     Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)
  orderItems      OrderItem[]
  paymentId       String?
  paymentStatus   String?
  customerName    String?
  customerPhone   String?
  deliveryAddress String?

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(uuid())
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId   String
  menuItem     MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Restrict)
  quantity     Int
  priceAtOrder Float
  subTotal     Float
  notes        String?
  createdAt    DateTime @default(now())

  @@map("order_items")
}
